import logging
import os

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext

from src.config.BotSingleton import BotSingleton
from src.keyboards.masterKeyboard import create_masters_paginated_keyboard, create_master_services_keyboard
from src.repository.MasterRepository import MasterRepository
from src.repository.ServiceRepository import ServiceRepository
from src.utils.messages import ALL_SERVICES

logger = logging.getLogger(__name__)

router_master = Router()

master_repo: MasterRepository = MasterRepository()
service_repo: ServiceRepository = ServiceRepository()

bot = BotSingleton().get_bot()


@router_master.callback_query(F.data.startswith("MASTERS"))
async def show_masters_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
    """
    await state.set_state("masters_list")

    masters = await master_repo.get_all()
    keyboard = create_masters_paginated_keyboard(masters=masters, page=0)

    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—Å–ª—É–≥–∏:"

    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router_master.callback_query(F.data.startswith("masters_page:"))
async def masters_pagination_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.
    """
    page = int(callback.data.split(":")[1])

    masters = await master_repo.get_all()
    keyboard = create_masters_paginated_keyboard(masters=masters, page=page)

    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—Å–ª—É–≥–∏:"

    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard
    )
    await callback.answer()


def get_master_info_message(master):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ  —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    working_days_map = {
        1: "–ü–ù", 2: "–í–¢", 3: "–°–†", 4: "–ß–¢", 5: "–ü–¢", 6: "–°–ë", 7: "–í–°"
    }
    days = [working_days_map[int(day)] for day in master.working_days.split(',')]
    working_days_str = ", ".join(days)

    message = (
        f"<b>–ú–∞—Å—Ç–µ—Ä: {master.name}</b>\n"
        # f"<i>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</i> {ALL_SERVICES[master.specialization]}\n"
        f"<i>–û–ø—ã—Ç:</i> {master.experience_years} –ª–µ—Ç\n"
        f"<i>–†–µ–π—Ç–∏–Ω–≥:</i> {'‚≠ê' * int(master.rating)} ({master.rating:.1f}/5.0)\n\n"

        f"<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
        f"<i>–ß–∞—Å—ã:</i> {master.working_hours_start} - {master.working_hours_end}\n"
        f"<i>–î–Ω–∏:</i> {working_days_str}\n\n"
    )

    if master.phone:
        message += f"<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> {master.phone}\n"
    if master.email:
        message += f"<i>Email:</i> {master.email}\n"

    return message



@router_master.callback_query(F.data.startswith("master_info:"))
async def master_info_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ —Å–ø–∏—Å–æ–∫ –µ–≥–æ —É—Å–ª—É–≥.
    """
    master_id = int(callback.data.split(":")[1])

    master = await master_repo.get_by_id(master_id)
    if not master:
        await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
    master_services_list = await master_repo.get_master_services(master_id)

    message_text = get_master_info_message(master)
    keyboard = create_master_services_keyboard(master_id=master_id, services=master_services_list)
    #TODO –∫–∞–∫ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–æ–≤
    # photo_path = f"../images/{master.username}.jpg"
    photo_path = f"src/images/master_1.jpg"
    with open(photo_path, 'rb') as photo_file:
        photo_bytes = photo_file.read()

    if os.path.exists(photo_path):
        with open(photo_path, 'rb') as photo_file:
            photo_bytes = photo_file.read()
        logger.info("—Å —Ñ–æ—Ç–æ")
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
        photo_input = BufferedInputFile(photo_bytes, filename=f"master_1.jpg")

        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=photo_input,
            caption=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        # await callback.message.delete()

    else:
        logger.info("–±–µ–∑ —Ñ–æ—Ç–æ")
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await callback.answer()


@router_master.callback_query(F.data.startswith("master_service:"))
async def master_service_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ –º–∞—Å—Ç–µ—Ä–∞.
    """
    _, master_id, service_id = callback.data.split(":")
    master_id = int(master_id)
    service_id = int(service_id)

    master = await master_repo.get_by_id(master_id)
    service = await service_repo.get_by_id(service_id)

    if not master or not service:
        await callback.answer("–£—Å–ª—É–≥–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    message_text = f"<b>{ALL_SERVICES[service.name]}</b>\n\n" \
                   f"{service.description}\n\n" \
                   f"<b>–¶–µ–Ω–∞:</b> {service.price}‚ÇΩ\n" \
                   f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.duration_minutes} –º–∏–Ω\n\n" \
                   f"<b>–ú–∞—Å—Ç–µ—Ä:</b> {master.name}"
    try:
        await callback.message.edit_text(
            text=message_text,
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"ORDER:{master_id}:{service_id}")],
                [InlineKeyboardButton(text="üîô –ö —É—Å–ª—É–≥–∞–º –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"master_info:{master_id}")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer(
            text=message_text,
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"ORDER:{master_id}:{service_id}")],
                [InlineKeyboardButton(text="üîô –ö —É—Å–ª—É–≥–∞–º –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"master_info:{master_id}")]
            ]),
            parse_mode="HTML"
        )
    await callback.answer()


@router_master.callback_query(F.data == "back:masters_list")
async def back_to_masters_list_handler(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ.
    """
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_masters_handler(callback, state)


@router_master.callback_query(F.data.startswith("service_select_MASTERS"))
async def show_masters_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
    """
    await state.set_state("masters_list")

    masters = await master_repo.get_by_service()
    keyboard = create_masters_paginated_keyboard(masters=masters, page=0)

    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—Å–ª—É–≥–∏:"

    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard
    )
    await callback.answer()