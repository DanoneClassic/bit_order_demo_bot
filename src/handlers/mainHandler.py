import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from src.handlers.masterHandler import master_repo
from src.keyboards.mainKeyboards import get_main_keyboard, get_back_to_main_keyboard
from src.keyboards.masterKeyboard import create_masters_paginated_keyboard
from src.keyboards.servicesKeyboards import get_category_keyboard, get_services_keyboard, create_search_results_keyboard
from src.repository.ServiceRepository import ServiceRepository
from src.repository.UserRepository import UserRepository
from src.utils.messages import MAIN, MENU, ALL_SERVICES

logger = logging.getLogger(__name__)

router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
user_repo = UserRepository()
service_repo = ServiceRepository()

class SearchStates(StatesGroup):
    waiting_for_search_query = State()

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    username = message.from_user.username
    telegram_id = message.from_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = await user_repo.get_or_create(
        telegram_id=telegram_id,
        username=username
    )

    #–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(
        MAIN['START'],
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("MAIN:"))
async def process_back(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥"""
    menu = callback.data.split(":")[1]

    if menu == "SEARCH":
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await state.set_state(SearchStates.waiting_for_search_query)

        await callback.message.edit_text(
            text="üîç <b>–ü–æ–∏—Å–∫ —É—Å–ª—É–≥</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç–µ:\n\n"
                 "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–∏–∂–∫–∞, –º–∞–Ω–∏–∫—é—Ä, –º–∞—Å—Å–∞–∂, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ...</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back:main_menu")
            ]]),
            parse_mode="HTML"
        )
        return


    keyboards = {
        "CATEGORY": get_category_keyboard(),
        "SEARCH": get_category_keyboard(),
        "INFO": get_back_to_main_keyboard(),
    }

    if menu in keyboards:
        await callback.message.edit_text(
            text=MENU[menu],
            reply_markup=keyboards[menu]
        )

@router.callback_query(F.data.startswith("back:"))
async def process_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥"""
    menu = callback.data.split(":")[1]
    keyboards = {
        "CHOOSE_SERVICE": get_category_keyboard(),
        "masters_list": create_masters_paginated_keyboard(masters = await master_repo.get_all()),
        "main_menu": get_main_keyboard()
    }

    #TODO –ø–æ–º–µ–Ω—è—Ç—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    try:
        if menu in keyboards:
            await callback.message.answer(
                text=MENU[menu],
                reply_markup=keyboards[menu]
            )
    except Exception as e:
        await callback.message.delete()
        if menu in keyboards:
            await callback.message.answer(
                text=MENU[menu],
                reply_markup=keyboards[menu]
            )


@router.message(SearchStates.waiting_for_search_query)
async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.strip()
    logger.info(search_query)
    if len(search_query) < 2:
        await message.answer(
            text="‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="MAIN:CATEGORY")
            ]])
        )
        return

    try:

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        # services_by_name = await service_repo.search_by_name(search_query)

        services_by_description = await service_repo.search_by_description(search_query)

        all_services = services_by_description
        unique_services = []
        seen_ids = set()

        for service in all_services:
            if service.id not in seen_ids:
                unique_services.append(service)
                seen_ids.add(service.id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        if unique_services:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
            search_keyboard = create_search_results_keyboard(unique_services, search_query)

            await message.answer(
                text=f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> \"{search_query}\"\n\n"
                     f"–ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: <b>{len(unique_services)}</b>",
                reply_markup=search_keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                text=f"üòî <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                     f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                     f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                     f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                     f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="MAIN:SEARCH")],
                    [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="MAIN:CATEGORY")]
                ]),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await state.clear()
        await message.answer(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="MAIN:CATEGORY")
            ]])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data.startswith("search_page:"))
async def handle_search_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        _, search_query, page_str = callback.data.split(":")
        page = int(page_str)

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫
        # services_by_name = await service_repo.search_by_name(search_query)
        services_by_description = await service_repo.search_by_description(search_query)

        all_services = services_by_description
        unique_services = []
        seen_ids = set()

        for service in all_services:
            if service.id not in seen_ids:
                unique_services.append(service)
                seen_ids.add(service.id)

        if unique_services:
            search_keyboard = create_search_results_keyboard(unique_services, search_query, page)

            await callback.message.edit_text(
                text=f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> \"{search_query}\"\n\n"
                     f"–ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: <b>{len(unique_services)}</b> (—Å—Ç—Ä. {page + 1})",
                reply_markup=search_keyboard,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data.startswith("service:search:"))
async def process_search_service_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    service_name = callback.data.split(":", 2)[2]

    service_db = await service_repo.get_by_name(service_name)

    if service_db:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        hours = service_db.duration_minutes // 60
        minutes = service_db.duration_minutes % 60

        if hours > 0 and minutes > 0:
            duration_text = f"{hours} —á {minutes} –º–∏–Ω"
        elif hours > 0:
            duration_text = f"{hours} —á"
        else:
            duration_text = f"{minutes} –º–∏–Ω"

        message_text = (
            f"‚ú® <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:</b>\n\n"
            f"üìã <b>{ALL_SERVICES[service_db.name]}</b>\n\n"
            f"üìù <i>{service_db.description}</i>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {service_db.price} ‚ÇΩ\n"
            f"‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_text}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_services_keyboard(service_name),
            parse_mode="HTML"
        )
    else:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


