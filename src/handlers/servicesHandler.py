import logging
from datetime import datetime
from typing import List

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.handlers.masterHandler import master_repo
from src.keyboards.mainKeyboards import get_back_to_main_keyboard
from src.keyboards.masterKeyboard import create_masters_paginated_keyboard
from src.keyboards.servicesKeyboards import get_nails_services_keyboard, get_hair_services_keyboard, \
    get_cosmetology_keyboard, get_hardware_services_keyboard, get_services_keyboard, get_makeup_services_keyboard, \
    get_brows_lashes_services_keyboard, get_spa_services_keyboard, get_kids_services_keyboard, get_category_keyboard
from src.models.Order import Order, OrderStatus
from src.models.users.Customer import Customer
from src.models.users.Master import Master
from src.repository.CustomerRepository import CustomerRepository
from src.repository.OrderRepository import OrderRepository
from src.repository.ServiceRepository import ServiceRepository
from src.repository.UserRepository import UserRepository
from src.states.BookingState import BookingState
from src.utils.messages import MENU, ORDER_CONFIRMATION_MESSAGE, ALL_SERVICES

logger = logging.getLogger(__name__)

services_router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
user_repo = UserRepository()
service_repo = ServiceRepository()
order_repo = OrderRepository()
customer_repo = CustomerRepository()


@services_router.callback_query(F.data.startswith("category:"))
async def process_category(callback: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–∫–∞–∑–∞"""
    category = callback.data.split(":")[1]

    keyboards = {
        "hair_services": get_hair_services_keyboard(),
        "cosmetology": get_cosmetology_keyboard(),
        "nails_services": get_nails_services_keyboard(),
        "hardware_services": get_hardware_services_keyboard(),
        "makeup_services": get_makeup_services_keyboard(),
        "brows_lashes_services": get_brows_lashes_services_keyboard(),
        "spa_services": get_spa_services_keyboard(),
        "kids_services": get_kids_services_keyboard()
    }

    category_names = {
        "hair_services": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
        "cosmetology": "üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
        "nails_services": "üíÖ –£—Å–ª—É–≥–∏ –Ω–æ–≥—Ç–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
        "hardware_services": "üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏",
        "makeup_services": "üíÑ –í–∏–∑–∞–∂ –∏ –º–∞–∫–∏—è–∂",
        "brows_lashes_services": "üëÅÔ∏è –£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π –∏ —Ä–µ—Å–Ω–∏—Ü",
        "spa_services": "üß¥ SPA –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "kids_services": "üë∂ –î–µ—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏"
    }

    if category in keyboards:
        category_name = category_names.get(category, "–£—Å–ª—É–≥–∏")
        await callback.message.edit_text(
            text=f"{category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=keyboards[category]
        )

    await callback.answer()


@services_router.callback_query(F.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        _, category, page = callback.data.split(":")
        page = int(page)
        logger.info(f"Pagination {category}:{page}, {callback.data}")

        keyboards = {
            "hair_services": get_hair_services_keyboard(page),
            "cosmetology": get_cosmetology_keyboard(page),
            "nails_services": get_nails_services_keyboard(page),
            "hardware_services": get_hardware_services_keyboard(page),
            "makeup_services": get_makeup_services_keyboard(page),
            "brows_lashes_services": get_brows_lashes_services_keyboard(page),
            "spa_services": get_spa_services_keyboard(page),
            "kids_services": get_kids_services_keyboard(page)
        }

        category_names = {
            "hair_services": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
            "cosmetology": "üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
            "nails_services": "üíÖ –£—Å–ª—É–≥–∏ –Ω–æ–≥—Ç–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
            "hardware_services": "üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏",
            "makeup_services": "üíÑ –í–∏–∑–∞–∂ –∏ –º–∞–∫–∏—è–∂",
            "brows_lashes_services": "üëÅÔ∏è –£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π –∏ —Ä–µ—Å–Ω–∏—Ü",
            "spa_services": "üß¥ SPA –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
            "kids_services": "üë∂ –î–µ—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏"
        }

        if category in keyboards:
            category_name = category_names.get(category, "–£—Å–ª—É–≥–∏")
            await callback.message.edit_text(
                text=f"{category_name} (—Å—Ç—Ä. {page + 1})\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                reply_markup=keyboards[category]
            )
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    await callback.answer()


@services_router.callback_query(F.data == "current_page")
async def current_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)"""
    await callback.answer()


@services_router.callback_query(F.data.startswith("service:"))
async def process_service(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        parts = callback.data.split(":")
        if len(parts) >= 3:
            category = parts[1]
            service = parts[2]

            # –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            service_db = await service_repo.get_by_name(service)

            if service_db:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                hours = service_db.duration_minutes // 60
                minutes = service_db.duration_minutes % 60

                if hours > 0 and minutes > 0:
                    duration_text = f"{hours} —á {minutes} –º–∏–Ω"
                elif hours > 0:
                    duration_text = f"{hours} —á"
                else:
                    duration_text = f"{minutes} –º–∏–Ω"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"üìù <i>{service_db.description}</i>\n\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {service_db.price} ‚ÇΩ\n"
                    f"‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_text}\n\n"
                    f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
                )

                await callback.message.edit_text(
                    text=message_text,
                    reply_markup=get_services_keyboard(service_db.id),
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text(
                    text="‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_category_keyboard()
                )
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        return

    await callback.answer()


async def create_master_select_keyboard(masters: List[Master], service_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    builder = InlineKeyboardBuilder()

    for master in masters:
        button_text = f"üë§ {master.name} - {ALL_SERVICES[master.specialization]}"
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"ORDER:{master.id}:{service_id}"
        ))

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"back:main_menu"
    ))
    builder.adjust(1)
    return builder.as_markup()


@services_router.callback_query(F.data.startswith("ORDER:"))
async def start_order_process(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è.
    """
    parts = callback.data.split(":")

    try:
        master_id = int(parts[1])
        service_id = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    telegram_user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        master_id=master_id,
        service_id=service_id,
        telegram_user_id=telegram_user_id
    )

    customer = await customer_repo.get_by_telegram_id(telegram_user_id)
    master = await master_repo.get_by_id(master_id)
    service = await service_repo.get_by_id(service_id)
    appointment_datetime = datetime.now()

    if customer and customer.name and customer.phone:
        new_order = Order(
            user_id=customer.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
            master_id=master.id,
            service_id=service.id,
            appointment_datetime=appointment_datetime,
            duration_minutes=service.duration_minutes,
            total_price=service.price,
            status=OrderStatus.PENDING,
            client_name=customer.name,
            client_phone=customer.phone
        )

        created_order = await order_repo.create(new_order)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await  callback.message.edit_text(
            ORDER_CONFIRMATION_MESSAGE.format(
                order_id=created_order.id,
                master_name=master.name,
                service_name=service.name,
                price=created_order.total_price,
                duration=created_order.duration_minutes,
                datetime=created_order.appointment_datetime.strftime("%d.%m.%Y –≤ %H:%M")
            ),
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="HTML"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


    else:
        # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await callback.message.edit_text(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
        )
        await state.set_state(BookingState.waiting_for_name)

    await callback.answer()


@services_router.message(BookingState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    user_name = message.text.strip()
    if len(user_name) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(client_name=user_name)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(BookingState.waiting_for_phone)


@services_router.message(BookingState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑.
    """
    if message.contact:
        user_phone = message.contact.phone_number
    else:
        user_phone = message.text.strip()
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not user_phone.replace('+', '').replace('-', '').replace('(', '').replace(')', '').isdigit() or len(
                user_phone) < 10:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

    await state.update_data(client_phone=user_phone)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()

    master = await master_repo.get_by_id(data['master_id'])
    service = await service_repo.get_by_id(data['service_id'])

    if not master or not service:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏.")
        await state.clear()
        return

    # TODO: –ó–¥–µ—Å—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    appointment_datetime = datetime.now()

    # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º.
    customer = await customer_repo.get_by_telegram_id(data['telegram_user_id'])
    if not customer:
        customer = Customer(
            telegram_id=data['telegram_user_id'],
            username=message.from_user.username,
            name=data.get('client_name'),
            phone=data.get('client_phone')
        )
        customer = await customer_repo.create(customer)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer.name = data.get('client_name') or customer.name
        customer.phone = data.get('client_phone') or customer.phone
        await customer_repo.update(customer)

    new_order = Order(
        user_id=customer.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
        master_id=master.id,
        service_id=service.id,
        appointment_datetime=appointment_datetime,
        duration_minutes=service.duration_minutes,
        total_price=service.price,
        status=OrderStatus.PENDING,
        client_name=customer.name,
        client_phone=customer.phone
    )

    created_order = await order_repo.create(new_order)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        ORDER_CONFIRMATION_MESSAGE.format(
            order_id=created_order.id,
            master_name=master.name,
            service_name=service.name,
            price=created_order.total_price,
            duration=created_order.duration_minutes,
            datetime=created_order.appointment_datetime.strftime("%d.%m.%Y –≤ %H:%M")
        ),
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="HTML"
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@services_router.callback_query(F.data.startswith("service_select:"))
async def process_service(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        parts = callback.data.split(":")
        # service = int(parts[1])                 # id TODO —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ —ç—Ç–æ –±—É–∫–æ–≤–∫–∏
        select = parts[2]                       # –¥–µ–π—Å—Ç–≤–∏–µ

        service_id_str = parts[1]
        if not service_id_str.isdigit():
            service_from_db = await service_repo.get_by_name(service_id_str)
            service = service_from_db.id
        else:
            service = int(service_id_str)

        if (select == "MASTERS"):
            masters = await master_repo.get_by_service(service)
            logger.info(masters)
            keyboard = await create_master_select_keyboard(masters=masters, service_id=service)
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—Å–ª—É–≥–∏:"

            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard
            )


        logger.info(f"Service select {service}:{select}")

            # TODO –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É—Å–ª—É–≥–∏
            # order
            # masters
            # info


    except Exception as e:
        logger.error(e)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        return

    await callback.answer()
